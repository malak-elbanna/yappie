version: "3.8"

services:

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq

  auth-service-1:  
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/auth-service/.env  
    environment:
      PORT: 4999
    ports:
      - "4999:4999"
    depends_on:
      - db
      - redis


  auth-service-2:  
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/auth-service/.env  
    environment:
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      - db
      - redis


  cms-service-1:
    build: 
      context: ./backend/content-management-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/content-management-service/.env
    environment:
      PORT: 5001
    ports:
      - "5001:5001"

  cms-service-2:
    build: 
      context: ./backend/content-management-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/content-management-service/.env
    environment:
      PORT: 5002
    ports:
      - "5002:5002"


  streaming-service-1:
    build:
      context: ./backend/streaming-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/streaming-service/.env
    environment:
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      - redis

  streaming-service-2:
    build:
      context: ./backend/streaming-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/streaming-service/.env
    environment:
      PORT: 8081
    ports:
      - "8081:8081"
    depends_on:
      - redis

  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/notification-service/.env  
    ports:
      - "4000:4000"
    command: ["node", "server"]
    depends_on:
      - rabbitmq
      
  review-service:
    build:
      context: ./backend/review-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/review-service/.env
    ports:
      - "5003:5003"

  profile-service:
    build: 
      context: ./backend/profile-management-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/profile-management-service/.env
    ports:
      - "5004:5004"
    depends_on:
      - profile-db
    volumes:
      - ./backend/profile-management-service:/app

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user_db
    ports:
      - "5432:5432"
    volumes:
      - user_data:/var/lib/postgresql/data

  profile-db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: profile_db
    ports:
      - "5434:5432"
    volumes:
      - profile_data:/var/lib/postgresql/data

  redis:
    image: redis:latest  
    container_name: redis_container
    restart: always
    ports:
      - "6379:6379"

  kong-migrations:
    image: kong:3.3
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      kong-database:
        condition: service_healthy

  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong

    healthcheck:
      test: ["CMD", "pg_isready","-q","-U","kong", "-d", "kong"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

    ports:
      - "5433:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong:
    image: kong:3.3
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      kong-database:
        condition: service_healthy
    ports:
      - "8000:8000" 
      - "8001:8001" 
      - "8443:8443" 
      - "8444:8444" 

  konga-database:
    image: postgres:9.6
    environment:
      POSTGRES_USER: konga
      POSTGRES_PASSWORD: konga
      POSTGRES_DB: konga
    healthcheck:
      test: ["CMD", "pg_isready","-q","-U","konga", "-d", "konga"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    volumes:
      - konga_data:/var/lib/postgresql9.6/data

  konga:
    image: pantsel/konga:latest
    environment:
      DB_ADAPTER: postgres
      DB_HOST: konga-database
      DB_USER: konga
      DB_PASSWORD: konga
      DB_DATABASE: konga
      NODE_ENV: development
    ports:
      - "1337:1337"
    depends_on:
      kong:
        condition: service_healthy
      konga-database:
        condition: service_healthy

  kong-initialiser:
    image: kong/deck:latest
    container_name: kong-initialiser
    volumes:
      - ./kong-config/kong.yml:/config/kong.yml
    command: gateway sync /config/kong.yml --kong-addr=http://kong:8001
    depends_on:
      kong:
        condition: service_healthy


  kong-configurator:
    image: kong/deck:latest
    container_name: kong-configurator
    depends_on:
      kong-initialiser:
          condition: service_completed_successfully
    volumes:
      - ./kong-config/kong.yml:/config/kong.yml
    command: gateway dump  -o /config/kong.yml --kong-addr=http://kong:8001 --yes && gateway sync /config/kong.yml --kong-addr=http://kong:8001

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env 
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true 
    depends_on:
      - notification-service
    ports:
      - "5173:5173"
    command: ["npm", "run", "dev"]

volumes:
  rabbitmq-lib:
    driver: local
  rabbitmq-log:
    driver: local
  user_data:

  kong_data:
  profile_data:

  konga_data:

  kong-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./kong.yml

