name: k6 Stress Tests

on: [push, pull_request]

jobs:
    k6-test:
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout repository
                uses: actions/checkout@v3

            -   name: Set up k6
                uses: grafana/setup-k6-action@v1

            -   name: Create .env files
                run: |
                    mkdir -p src/backend/review-service
                    cat <<EOF > src/backend/review-service/.env
                    PORT=5003
                    MONGO_URI=mongodb+srv://salmaayman:LgFYRUMZ3iuGPyzD@cluster0.ufjw6qu.mongodb.net/?retryWrites=true&w=majority
                    EOF

                    mkdir -p src/backend/auth-service
                    cat <<EOF > src/backend/auth-service/.env
                    SQLALCHEMY_DATABASE_URI=postgresql://postgres:password@db:5432/user_db
                    JWT_SECRET_KEY=secret-key
                    SECRET_KEY=unique-and-secret-key
                    FLASK_DEBUG=True
                    PORT=5000
                    DB_HOST=db
                    DB_PORT=5432
                    ADMIN_EMAIL=admin@example.com
                    ADMIN_PASSWORD=securepass
                    EOF

                    mkdir -p src/backend/content-management-service
                    cat <<EOF > src/backend/content-management-service/.env
                    MONGO_URI=mongodb+srv://salmaayman:LgFYRUMZ3iuGPyzD@cluster0.ufjw6qu.mongodb.net/?retryWrites=true&w=majority
                    SECRET_KEY=secure_secret_key
                    HOST=0.0.0.0
                    PORT=5001
                    DEBUG=True
                    EOF

                    mkdir -p src/backend/streaming-service
                    cat <<EOF > src/backend/streaming-service/.env
                    MONGO_URI=mongodb+srv://salmaayman:LgFYRUMZ3iuGPyzD@cluster0.ufjw6qu.mongodb.net/?retryWrites=true&w=majority
                    REDIS_HOST=redis
                    REDIS_PORT=6379
                    JWT_SECRET_KEY=secret-key
                    EOF

                    mkdir -p src/backend/profile-management-service
                    cat <<EOF > src/backend/profile-management-service/.env
                    DATABASE_URL=postgresql://postgres:password@profile-db:5432/profile_db
                    HOST=0.0.0.0
                    PORT=5004
                    DEBUG=True
                    EOF

            -   name: Start Services
                working-directory: src
                run: |
                    docker compose -f docker-compose.test.yml build
                    docker compose -f docker-compose.test.yml up -d

            -   name: Wait for Services
                run: |
                    echo "Waiting for auth-service..."
                    until curl --fail http://localhost:5000/health || curl --fail http://localhost:5000; do
                        echo "Auth service not ready yet, retrying in 2s..."
                        sleep 2
                    done

                    echo "Waiting for content-management-service..."
                    until curl --fail http://localhost:5001/health; do
                        echo "Content management service not ready yet, retrying in 2s..."
                        sleep 2
                    done

                    echo "Waiting for profile-management-service..."
                    until curl --fail http://localhost:5005/health; do
                        echo "Profile management service not ready yet, retrying in 2s..."
                        sleep 2
                    done

                    echo "Waiting for review-service..."
                    until curl --fail http://localhost:5003/health; do
                        echo "Review service not ready yet, retrying in 2s..."
                        sleep 2
                    done

                    echo "Waiting for streaming-service..."
                    until curl --fail http://localhost:8080/health; do
                        echo "Streaming service not ready yet, retrying in 2s..."
                        sleep 2
                    done

            -   name: Register User
                run: |
                    curl -X POST http://localhost:5000/auth/register \
                    -H "Content-Type: application/json" \
                    -d '{"name": "test user", "email": "testUser@example.com", "password": "securePassword12$"}'

            -   name: Run k6 test
                uses: grafana/run-k6-action@v1
                with:
                    path: src/tests/k6/*_test.js

            -   name: Stop containers
                if: always()
                run: cd src && docker compose -f docker-compose.test.yml down
